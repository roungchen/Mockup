// =============================================================================
// Font Face
// @param {String} $name - name of the 
// @param {String} $path - 
// @param {String} $weight - 
// @param {String} $style - 
// @param {String} $exts - 
// =============================================================================
@mixin font-face($name, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;
	$eot_src: null;

	$extmods: (		
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		@if $ext == 'eot' {
			$eot_src: append($eot_src, url(quote($font_path + $name + "." + $extmod)) format(quote($format)), comma);
			$src: append($src, url(quote($font_path + $name + "." + $extmod)) format('embedded-opentype'), comma);
		} @else {
			$src: append($src, url(quote($font_path + $name + "." + $extmod)) format(quote($format)), comma);
		}
		
	}
	@font-face {
		font:{
			family: quote($name);
			style: $style;
			weight: $weight;
		}
		@if $eot_src {
			src: $eot_src;
		}
		src: $src;
	}
}


// =============================================================================
// Handle landscape orientation
// =============================================================================
@mixin landscape {
	@media screen and (orientation:landscape) {
		@content;
	}
}

// =============================================================================
// Handle portrait orientation
// =============================================================================
@mixin portrait {
	@media screen and (orientation:portrait) {
		@content;
	}
}

// =============================================================================
// Primary input mechanism system can hover over elements with ease, which mainly desktop
// =============================================================================
@mixin desktop-hover {
    @media (hover: hover) {
    	&:hover { 
	        @content;
	    }
    }
}

// =============================================================================
// Responsive breakpoint manager
// @access public
// @param {String} $breakpoint - Breakpoint
// @requires $breakpoints
// =============================================================================
@mixin respond-to($breakpoint) {
	$raw-query: map-get($breakpoints, $breakpoint);

	@if $raw-query {
		$query: if(
			type-of($raw-query) == 'string',
			unquote($raw-query),
			inspect($raw-query)
		);

		@media #{$query} {
	  		@content;
		}
	} @else {
		@error 'No value found for `#{$breakpoint}`. '
			 + 'Please make sure it is defined in `$breakpoints` map.';
	}
}


// =============================================================================
// smartphones, touchscreens
// =============================================================================
@mixin touchscreen-device {
	@media (hover: none) and (pointer: coarse) {
		@content;
	}	
}

@mixin font ($family:null,$size:null,$style:null,$weight:null,$color:null,$leading:null,$align:null,$transform:null,$decoration:null,$spacing:null) {	
	font:{
		family: $family;
		@if $size {
			@if unitless($size) {
				size: pt-to-px($size);
			} @else {
				size: $size;
			}
		}
		style:$style;
		weight:$weight;
	}
	letter-spacing: $spacing;
	@if $leading {
		@if unitless($leading) {
			line-height: pt-to-px($leading);
		} @else {
			line-height:$leading;
		}
	}
	color:$color;
	text:{
		align: $align;
		transform: $transform;
		decoration: $decoration;
	}
}

// =============================================================================
// Shorthand mixin for transition
// =============================================================================
@mixin transition ($value) {
	-webkit-transition: unquote($value);
	-moz-transition: unquote($value);
	-o-transition: unquote($value);
	transition: unquote($value);
}

// =============================================================================
// Shorthand mixin for transform
// =============================================================================
@mixin transform ($value) {
	-webkit-transform: unquote($value);
	-moz-transform: unquote($value);
	-ms-transform: unquote($value);
	-o-transform: unquote($value);
	transform: unquote($value);
}

// =============================================================================
// Shorthand mixin for box-shadow
// =============================================================================
@mixin box-shadow ($value) {
	-webkit-box-shadow: unquote($value);
	-moz-box-shadow: unquote($value);
	box-shadow: unquote($value);
}

// =============================================================================
// Shorthand mixin for background
// @param {String} $color [null]
// @param {Length} $image [null]
// @param {Length} $repeat [null]
// @param {Length} $attachment [null] - Values: fixed or scroll
// @param {Length} $position [null]
// @param {Length} $size [null]
// =============================================================================
@mixin background($color: null,$img: null,$repeat: null,$attachment: null,$position: null,$size: null) {
	background:{
		color: $color;
		repeat: $repeat;
		size: $size;
		attachment: $attachment;
		position: $position;
	}
	@if ($img) {
		$imgs: null;
		@if $img == 'none' {
			$imgs: none;
		} @else if str-index($img,"linear-gradient") { 
			$img: unquote($img);
			background-image: -webkit-#{$img};
			background-image: -moz-#{$img};
			background-image: -ms-#{$img};
			background-image: -o-#{$img};
			background-image: $img;
		} @else {
			$files: str-to-list($img);
			
	    	@each $file in $files {
	    		$imgs: append($imgs, url("#{$img_path}#{$file}"), comma);
	    	}
	    }
		background-image: $imgs;
	}
}

// =============================================================================
// Shorthand mixin for offset positioning
// @param {String} $position [null] - Either `relative`, `absolute` or `fixed`
// @param {Length} $top [null] - Top offset
// @param {Length} $right [null] - Right offset
// @param {Length} $bottom [null] - Bottom offset
// @param {Length} $left [null] - Left offset
// @param {Length} $index [null] - z-index
// =============================================================================
@mixin position($position: null, $top: null, $right: null, $bottom: null, $left: null,$index: null) {
	position: $position;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	z-index: $index;
}

// =============================================================================
// Shorthand mixin for padding
// @param {String} $default - Either top right bottom left, top/bottom right/left
// @param {Length} $top [null] - Top padding
// @param {Length} $right [null] - Right padding
// @param {Length} $bottom [null] - Bottom padding
// @param {Length} $left [null] - Left padding
// =============================================================================
@mixin padding ($default: null,$top: null, $right: null, $bottom: null, $left: null) {
	@if ($default) {
		padding: $default;	
	} @else if ($top and $right and $bottom and $left) {
		padding: $top $right $bottom $left;		
	} @else {
		padding: {
			top:$top;
			right:$right;
			bottom:$bottom;
			left:$left;
		}
	}
}

// =============================================================================
// Shorthand mixin for margin
// @param {String} $default - Either top right bottom left, top/bottom right/left
// @param {Length} $top [null] - Top margin
// @param {Length} $right [null] - Right margin
// @param {Length} $bottom [null] - Bottom margin
// @param {Length} $left [null] - Left margin
// =============================================================================
@mixin margin ($default: null,$top: null, $right: null, $bottom: null, $left: null) {
	@if ($default) {
		margin: $default;	
	} @else if ($top and $right and $bottom and $left) {
		margin: $top $right $bottom $left;		
	} @else {
		margin: {
			top:$top;
			right:$right;
			bottom:$bottom;
			left:$left;
		}
	}
}

@mixin loadingStyle () {
	$loading_front_color: #FCB731 !default;
	$loading_back_color: #9d958c !default;
	$loading_text_color: #808285 !default;
	.loading-box {
		@include position (fixed,$top:0,$left:0,$index:1000000);
	     width:100%;
	     height:100%;
	     background-color:white;
	     .text {
			@include font(Univers-Condensed,$size:12px,$color:$loading_text_color);
			@include position (absolute,$top:50%,$left:50%);
			@include transform ('translate(-50%,-50%)');
			padding-top:64px;
	     }
		.lds-css {
			@include position (absolute,$top:50%,$left:50%);
			@include transform ('translate(-50%,-50%)');	
			.lds-blocks {
			     position: relative;
			     width: 200px !important;
			     height: 200px !important;
			     -webkit-transform: translate(-100px, -100px) scale(1) translate(100px, 100px);
			     transform: translate(-100px, -100px) scale(1) translate(100px, 100px);     
			     div {
			          position: absolute;
			          width: 10px;
			          height: 10px;
			          background:$loading_back_color;
			          -webkit-animation: lds-blocks 1s linear infinite;
			          animation: lds-blocks 1s linear infinite;
			     }
			}
		}
	}

	@keyframes lds-blocks {
	     0% {
	          background: $loading_front_color;
	     }
	     12.5% {
	          background: $loading_front_color;
	     }
	     12.625% {
	          background: $loading_back_color;
	     }
	     100% {
	          background: $loading_back_color;
	     }
	}
	@-webkit-keyframes lds-blocks {
	     0% {
	          background: $loading_front_color;
	     }
	     12.5% {
	          background: $loading_front_color;
	     }
	     12.625% {
	          background: $loading_back_color;
	     }
	     100% {
	          background: $loading_back_color;
	     }
	}
}